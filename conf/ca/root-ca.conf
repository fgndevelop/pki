# Root CA configuration file

# see https://www.openssl.org/docs/manmaster/apps/config.html
# for an overview of the openssl config format

# The [default] section contains global constants that can be referred to from
# the entire configuration file. It may also hold settings pertaining to more
# than one openssl command.

[ default ]
ca_name                 = @CA_NAME@             	# CA name
ca_dir                  = @CA_DIR@              	# Top dir
default_ca              = $ca_name	               	# The default CA section
ca_key			= $ca_dir/private/$ca_name.key
RANDFILE               	= $ca_dir/mgmt/rnd		# Use RANDFILE
base_url		= http://pki.@CA_NAME@.com	# Sample Base URL
aia_url			= $base_url/$ca_name.cer	# Authority Information Access URL
crl_url			= $base_url/$ca_name.crl	# Certificate Revocation List URL

# The [req] section of the configuration file is used by the openssl req command.
# It defines the CA's key pair, its DN, and the desired extensions for the CA
# certificate.
#
# We do not request extensions for the root certificate. We're root,
# so we just DEFINE extensions 
[ req ]
default_bits            = 4096                 	# RSA key size, see the "pki req" command 
						# for different key types and sizes
default_keyfile		= $ca_key		# CA's private key
encrypt_key             = yes			# Encrypt private key
default_md              = sha256		# see https://www.entrust.com/lp/sha-1-sha-2-faq/ 
utf8                    = yes			# Input is UTF-8
string_mask             = utf8only		# Emit UTF-8 strings
prompt                  = no			# Don't prompt for DN
distinguished_name      = dn			# DN section

# Distinguished name
# These fields seem to be the most common ones in root certificates
[ dn ]
countryName             = "@CA_NAME@ Country Name" 
organizationName        = "@CA_NAME@ Organization"
organizationalUnitName  = "@CA_NAME@ Root CA"
commonName              = "@CA_NAME@ Common Name"

# The remainder of the configuration file is used by the openssl ca command.
# The CA section defines the locations of CA assets, as well as the policies
# applying to the CA.

[ @CA_NAME@ ]
certificate             = $ca_dir/${ca_name}.crt		# The CA cert
private_key             = $ca_key				# CA private key
new_certs_dir           = $ca_dir/certs           		# Certificate archive
serial                  = $ca_dir/mgmt/serial.crt		# CRT serial number
crlnumber               = $ca_dir/mgmt/serial.crl		# CRL serial number
database                = $ca_dir/mgmt/database 		# Database file
unique_subject          = no					# Require unique subject
default_days            = 3650					# Default validity
default_md              = sha256				# MD to use
policy                  = match_pol				# Default naming policy
email_in_dn             = no					# Add email to cert DN
preserve                = no					# Keep passed DN ordering
name_opt                = ca_default				# Subject DN display options
cert_opt                = ca_default				# Certificate display options
copy_extensions         = none					# Copy extensions from CSR
x509_extensions         = tier2_ca_ext				# Default cert extensions
default_crl_days        = 365					# How long before next CRL
crl_extensions          = crl_ext				# CRL extensions

# Naming policies control which parts of a DN end up in the certificate and
# under what circumstances certification should be denied.
[ match_pol ]
countryName             = optional
organizationName        = match               	# Typically an organization will have it's own PKI 
organizationalUnitName  = supplied            	# Organizational unit names help shaping the PKI 
commonName              = supplied           	# Must be present

# These values are listed as a reference.
# A "match-anything" policy makes most sense for external
# (not part of the organizations PKI structure) root CAs

[ any_pol ]
domainComponent         = optional
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
emailAddress            = optional

# Certificate extensions define what types of certificates
# the CA is able to create.

# This section is used when self-signing the root certificate
[ root_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always

# Since this is a root ca's config file, it is most likely to sign CA request
# The two sections are configured for different path lengths, hence for a
# Tier2 or Tier3 pki respectively 
[ tier2_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:0
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
crlDistributionPoints	= @crl_info

# For more complex setups: a tier3 pki structure 
[ tier3_ca_ext ]
keyUsage                = critical,keyCertSign,cRLSign
basicConstraints        = critical,CA:true,pathlen:1
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always
authorityInfoAccess     = @issuer_info
crlDistributionPoints	= @crl_info

# CRL extensions exist solely to point to the CA certificate that has issued
# the CRL.
[ crl_ext ]
authorityKeyIdentifier  = keyid:always
authorityInfoAccess	= @issuer_info

# Authority Information Access (Issuing CA) URL
# See https://tools.ietf.org/html/rfc5280#section-5.2.7 for details
# BLUF: an url that points to the certificate used to sign the crl
#	one of the urls provided SHOULD be a http url
[ issuer_info ]
caIssuers;URI.0		= $aia_url

# Where to get the certificate revocation list
[ crl_info ]
URI.0			= $crl_url
